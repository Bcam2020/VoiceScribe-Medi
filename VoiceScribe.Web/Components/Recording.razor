@page "/recording"
@using VoiceScribe.Application.Transcriptions.Commands
@using VoiceScribe.Application.Transcriptions.Services
@using VoiceScribe.Web.Models
@inject TranscriptionService TranscriptionService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Voice Recording</PageTitle>

<h1>Medical Voice Recording</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="form-group">
            <label for="patientReference">Patient Reference:</label>
            <input id="patientReference" class="form-control" @bind="patientReference" />
        </div>
    </div>
</div>

<div class="recording-controls mb-4">
    <button class="btn btn-primary me-2" @onclick="StartRecording" disabled="@isRecording">
        <i class="oi oi-microphone"></i> Start Recording
    </button>
    <button class="btn btn-danger" @onclick="StopRecording" disabled="@(!isRecording)">
        <i class="oi oi-media-stop"></i> Stop Recording
    </button>
</div>

@if (isRecording)
{
    <div class="alert alert-info">
        <div class="spinner-border spinner-border-sm" role="status">
            <span class="visually-hidden">Recording...</span>
        </div>
        Recording in progress...
    </div>
}

@if (isProcessing)
{
    <div class="alert alert-warning">
        <div class="spinner-border spinner-border-sm" role="status">
            <span class="visually-hidden">Processing...</span>
        </div>
        Processing your recording...
    </div>
}

@code {
    private string patientReference = "";
    private bool isRecording = false;
    private bool isProcessing = false;

    private async Task StartRecording()
    {
        isRecording = true;
        var success = await JSRuntime.InvokeAsync<bool>("audioRecorder.startRecording");

        if (!success)
        {
            isRecording = false;
            // Show error message
        }
    }

    private async Task StopRecording()
    {
        isRecording = false;
        isProcessing = true;

        try
        {
            var result = await JSRuntime.InvokeAsync<RecordingResult>("audioRecorder.stopRecording");

            // Use the browser's transcription
            var command = new CreateTranscriptionCommand(patientReference, result.AudioBytes);
            var id = await TranscriptionService.CreateTranscriptionAsync(command, result.Transcription);

            NavigationManager.NavigateTo($"/transcriptions/{id}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            // Handle error
        }
        finally
        {
            isProcessing = false;
        }
    }
}