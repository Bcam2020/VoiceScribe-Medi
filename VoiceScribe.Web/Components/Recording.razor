@page "/recording"
@using VoiceScribe.Application.Transcriptions.Commands
@using VoiceScribe.Application.Transcriptions.Services
@using VoiceScribe.Web.Models
@using Microsoft.JSInterop
@inject TranscriptionService TranscriptionService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Voice Recording</PageTitle>

<style>
    .recording-status {
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        margin-bottom: 15px;
    }

    .recording-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: #dc3545;
        animation-name: pulse;
        animation-duration: 1s;
        animation-iteration-count: infinite;
    }

    @@keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.4;
        }

        100% {
            opacity: 1;
        }
    }

    .permission-request {
        background-color: #e9ecef;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        text-align: center;
    }

    .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 0.2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border .75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<h1>Medical Voice Recording</h1>

<div class="row mb-4">
    <div class="col-md-8">
        @if (debugMessages.Count > 0)
        {
            <div class="alert alert-secondary mb-3">
                <h5>Debug Messages:</h5>
                <ul>
                    @foreach (var msg in debugMessages)
                    {
                        <li>@msg</li>
                    }
                </ul>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ClearDebug">Clear</button>
            </div>
        }

        @if (isLoading)
        {
            <div class="alert alert-info">
                <span class="loading-spinner me-2"></span>
                Loading audio capabilities...

                <div class="mt-3">
                    <button class="btn btn-sm btn-primary" @onclick="TestJsInterop">
                        Test JS Interop
                    </button>
                    <button class="btn btn-sm btn-warning" @onclick="ForceInitialization">
                        Force Initialize
                    </button>
                </div>
            </div>
        }
        else if (!permissionGranted && !permissionError)
        {
            <div class="permission-request mb-4">
                <h5>Microphone Access Required</h5>
                <p>VoiceScribe needs access to your microphone to record audio for transcription.</p>
                <button class="btn btn-primary" @onclick="RequestMicrophonePermission">
                    <i class="bi bi-mic-fill me-2"></i>Allow Microphone Access
                </button>
            </div>
        }
        else if (permissionError)
        {
            <div class="alert alert-danger mb-4">
                <h5><i class="bi bi-exclamation-triangle-fill me-2"></i>Microphone Access Denied</h5>
                <p>VoiceScribe cannot record audio without microphone access. Please enable microphone access in your browser settings and refresh this page.</p>
                <p><strong>Error:</strong> @(errorMessage ?? "Unknown error")</p>
                <button class="btn btn-outline-danger" @onclick="RequestMicrophonePermission">
                    Try Again
                </button>
            </div>
        }
        else if (permissionGranted)
        {
            <div class="form-group mb-3">
                <label for="patientReference">Patient Reference:</label>
                <input id="patientReference" class="form-control" @bind="patientReference" placeholder="Enter patient identifier" />
            </div>

            <div class="recording-controls mb-3">
                @if (!isRecording)
                {
                    <button class="btn btn-primary btn-lg" @onclick="StartRecording" disabled="@(string.IsNullOrWhiteSpace(patientReference))">
                        <i class="bi bi-mic-fill me-2"></i>Start Recording
                    </button>

                    @if (string.IsNullOrWhiteSpace(patientReference))
                    {
                        <div class="text-muted mt-2">
                            <small>Please enter a patient reference to enable recording</small>
                        </div>
                    }
                }
                else
                {
                    <button class="btn btn-danger btn-lg" @onclick="StopRecording">
                        <i class="bi bi-stop-fill me-2"></i>Stop Recording
                    </button>
                }
            </div>

            @if (isRecording)
            {
                <div class="recording-status">
                    <div class="d-flex align-items-center mb-2">
                        <div class="recording-indicator me-2"></div>
                        <div><strong>Recording in progress...</strong></div>
                    </div>
                    @if (!string.IsNullOrEmpty(liveTranscription))
                    {
                        <div class="mt-2 mb-2">
                            <strong>Live Transcription:</strong>
                            <p>@liveTranscription</p>
                        </div>
                    }
                    <p class="text-muted mb-0">Speak clearly and at a normal pace for best results.</p>
                </div>
            }
        }

        @if (errorMessage != null && !permissionError)
        {
            <div class="alert alert-danger mt-3">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                @errorMessage
            </div>
        }
    </div>
</div>

@if (isProcessing)
{
    <div class="alert alert-info">
        <div class="spinner-border spinner-border-sm" role="status">
            <span class="visually-hidden">Processing...</span>
        </div>
        Processing your recording...
    </div>
}

@code {
    private string patientReference = "";
    private bool isRecording = false;
    private bool isProcessing = false;
    private bool isLoading = true;
    private bool permissionGranted = false;
    private bool permissionError = false;
    private string? errorMessage = null;
    private string liveTranscription = "";
    private List<string> debugMessages = new List<string>();
    private DotNetObjectReference<Recording>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AddDebug("Component initialized");
            objRef = DotNetObjectReference.Create(this);
            await InitializeAudioRecorder();
        }
    }

    private async Task InitializeAudioRecorder()
    {
        try
        {
            AddDebug("Initializing audio recorder...");
            isLoading = true;
            StateHasChanged();

            // First test if JS is working at all
            await JSRuntime.InvokeVoidAsync("console.log", "Testing JS console from Blazor");
            AddDebug("Console log test successful");

            // Check if the audioRecorder object exists
            var hasAudioRecorder = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.audioRecorder !== 'undefined'");
            AddDebug($"audioRecorder exists: {hasAudioRecorder}");

            if (!hasAudioRecorder)
            {
                errorMessage = "Audio recording functionality not available. Please refresh the page or try a different browser.";
                isLoading = false;
                StateHasChanged();
                return;
            }

            // Now initialize the audioRecorder with our reference
            var initResult = await JSRuntime.InvokeAsync<bool>("eval", @"
                typeof window.audioRecorder !== 'undefined' &&
                typeof window.audioRecorder.initialize === 'function' &&
                window.audioRecorder.initialize(DotNet.createJSObjectReference(arguments[0]))
            ", objRef);

            AddDebug($"Initialization result: {initResult}");

            // We'll wait for the callback in OnAudioRecorderInitialized
        }
        catch (Exception ex)
        {
            AddDebug($"Error initializing audio: {ex.Message}");
            errorMessage = $"Error initializing audio: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TestJsInterop()
    {
        try
        {
            AddDebug("Testing JS interop...");

            // Test direct global function
            await JSRuntime.InvokeVoidAsync("testAudioRecorder");
            AddDebug("Global test function called");

            // Test audioRecorder.testFunction
            var testResult = await JSRuntime.InvokeAsync<bool>("eval", @"
                typeof window.audioRecorder !== 'undefined' &&
                typeof window.audioRecorder.testFunction === 'function' &&
                window.audioRecorder.testFunction()
            ");

            AddDebug($"audioRecorder.testFunction result: {testResult}");
        }
        catch (Exception ex)
        {
            AddDebug($"JS test error: {ex.Message}");
        }
    }

    private async Task ForceInitialization()
    {
        try
        {
            AddDebug("Forcing initialization...");

            // Set global flag and proceed
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.audioRecorderInitialized = true;
                console.log('Forced initialization flag set');
            ");

            isLoading = false;
            permissionGranted = false;
            permissionError = false;
            AddDebug("Forced initialization complete");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AddDebug($"Force init error: {ex.Message}");
        }
    }

    private async Task RequestMicrophonePermission()
    {
        try
        {
            AddDebug("Requesting microphone permission...");
            errorMessage = null;
            isLoading = true;
            permissionError = false;
            StateHasChanged();

            // Request permission
            var permissionResult = await JSRuntime.InvokeAsync<bool>("eval", @"
                typeof window.audioRecorder !== 'undefined' &&
                typeof window.audioRecorder.requestMicrophonePermission === 'function' &&
                window.audioRecorder.requestMicrophonePermission()
            ");

            AddDebug($"Permission request result: {permissionResult}");

            // We'll wait for the callback in OnMicrophonePermissionChanged
        }
        catch (Exception ex)
        {
            AddDebug($"Permission request error: {ex.Message}");
            permissionError = true;
            errorMessage = $"Error requesting microphone access: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task StartRecording()
    {
        if (string.IsNullOrWhiteSpace(patientReference))
        {
            errorMessage = "Please enter a patient reference before recording.";
            return;
        }

        errorMessage = null;

        try
        {
            AddDebug("Starting recording...");
            liveTranscription = "";

            var success = await JSRuntime.InvokeAsync<bool>("eval", @"
                typeof window.audioRecorder !== 'undefined' &&
                typeof window.audioRecorder.startRecording === 'function' &&
                window.audioRecorder.startRecording()
            ");

            AddDebug($"Start recording result: {success}");

            // We'll wait for the callback in OnRecordingStarted
        }
        catch (Exception ex)
        {
            AddDebug($"Start recording error: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task StopRecording()
    {
        isRecording = false;
        isProcessing = true;
        StateHasChanged();

        try
        {
            AddDebug("Stopping recording...");

            var result = await JSRuntime.InvokeAsync<RecordingResult>("eval", @"
                new Promise((resolve, reject) => {
                    if (typeof window.audioRecorder !== 'undefined' &&
                        typeof window.audioRecorder.stopRecording === 'function') {
                        window.audioRecorder.stopRecording()
                            .then(result => resolve(result))
                            .catch(err => reject(err));
                    } else {
                        reject('Audio recorder not available');
                    }
                })
            ");

            if (result.AudioBytes.Length == 0)
            {
                AddDebug("No audio was recorded");
                errorMessage = "No audio was recorded. Please try again.";
                isProcessing = false;
                StateHasChanged();
                return;
            }

            AddDebug($"Got transcription: {result.Transcription}");

            // Use the browser's transcription
            var command = new CreateTranscriptionCommand(patientReference, result.AudioBytes);
            var id = await TranscriptionService.CreateTranscriptionAsync(command, result.Transcription);

            NavigationManager.NavigateTo($"/transcriptions/{id}");
        }
        catch (Exception ex)
        {
            AddDebug($"Stop recording error: {ex.Message}");
            errorMessage = $"Error processing recording: {ex.Message}";
            isProcessing = false;
            StateHasChanged();
        }
    }

    // JSInvokable methods for JavaScript callbacks

    [JSInvokable]
    public void OnAudioRecorderInitialized(bool success, string? errorMsg)
    {
        AddDebug($"Audio recorder initialized callback: {success}");
        isLoading = false;

        if (!success && !string.IsNullOrEmpty(errorMsg))
        {
            errorMessage = errorMsg;
        }

        StateHasChanged();
    }

    [JSInvokable]
    public void OnTestFunctionCalled()
    {
        AddDebug("Test function callback received");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnMicrophonePermissionChanged(bool granted, string? errorMsg)
    {
        AddDebug($"Microphone permission callback: {granted}");
        isLoading = false;
        permissionGranted = granted;
        permissionError = !granted;

        if (!granted && !string.IsNullOrEmpty(errorMsg))
        {
            errorMessage = errorMsg;
        }

        StateHasChanged();
    }

    [JSInvokable]
    public void OnRecordingStarted(bool withRecognition)
    {
        AddDebug($"Recording started callback: withRecognition={withRecognition}");
        isRecording = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnRecordingStopped()
    {
        AddDebug("Recording stopped callback");
        isRecording = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnRecordingError(string errorMsg)
    {
        AddDebug($"Recording error callback: {errorMsg}");
        errorMessage = errorMsg;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnTranscriptionUpdated(string text)
    {
        liveTranscription = text;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnRecognitionError(string errorType)
    {
        AddDebug($"Recognition error: {errorType}");
        // Don't show this as a main error, just log it
        StateHasChanged();
    }

    // Helper methods

    private void AddDebug(string message)
    {
        debugMessages.Add($"[{DateTime.Now.ToString("HH:mm:ss")}] {message}");

        // Keep only the last 10 messages
        if (debugMessages.Count > 10)
        {
            debugMessages.RemoveAt(0);
        }
    }

    private void ClearDebug()
    {
        debugMessages.Clear();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    public class RecordingResult
    {
        public byte[] AudioBytes { get; set; } = Array.Empty<byte>();
        public string Transcription { get; set; } = "";
    }
}